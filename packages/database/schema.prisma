// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SurveyType {
  link
  web
  website
  app
}

model Survey {
  id                  String                  @id @default(cuid())
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  type                SurveyType              @default(web)
  environment         Environment             @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       String
}

enum EnvironmentType {
  production
  development
}

enum IntegrationType {
  googleSheets
  notion
  airtable
  slack
}

model Integration {
  id            String          @id @default(cuid())
  type          IntegrationType
  environmentId String
  /// @zod.custom(imports.ZIntegrationConfig)
  /// [IntegrationConfig]
  config        Json
  environment   Environment     @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([type, environmentId])
  @@index([environmentId])
}

model Environment {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now()) @map(name: "created_at")
  updatedAt             DateTime         @updatedAt @map(name: "updated_at")
  type                  EnvironmentType
  product               Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId             String
  widgetSetupCompleted  Boolean          @default(false)
  appSetupCompleted     Boolean          @default(false)
  websiteSetupCompleted Boolean          @default(false)
  surveys               Survey[]
  // people                Person[]
  // actionClasses         ActionClass[]
  // attributeClasses      AttributeClass[]
  // apiKeys               ApiKey[]
  // webhooks              Webhook[]
  // tags                  Tag[]
  // segments              Segment[]
  integration           Integration[]

  @@index([productId])
}

model Product {
  id                   String          @id @default(cuid())
  createdAt            DateTime        @default(now()) @map(name: "created_at")
  updatedAt            DateTime        @updatedAt @map(name: "updated_at")
  name                 String

  organizationId       String
  environments         Environment[]
}

enum IdentityProvider {
  email
  github
  google
  azuread
  openid
}

enum Role {
  project_manager
  engineer
  founder
  marketing_specialist
  other
}

enum Objective {
  increase_conversion
  improve_user_retention
  increase_user_adoption
  sharpen_marketing_messaging
  support_sales
  other
}

model User {
  id                        String           @id @default(cuid())
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  twoFactorSecret           String?
  twoFactorEnabled          Boolean          @default(false)
  backupCodes               String?
  password                  String?
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  // memberships               Membership[]
  // accounts                  Account[]
  // responseNotes             ResponseNote[]
  groupId                   String?
  // invitesCreated            Invite[]         @relation("inviteCreatedBy")
  // invitesAccepted           Invite[]         @relation("inviteAcceptedBy")
  role                      Role?
  objective                 Objective?
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// [UserNotificationSettings]
  notificationSettings      Json             @default("{}")
  // surveys                   Survey[]

  @@index([email])
}

model ShortUrl {
  id        String   @id // generate nanoId in service
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  url       String   @unique
}